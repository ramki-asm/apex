<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Omex.Extensions.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Omex.Extensions.Abstractions.Accessors.Accessor`1">
            <summary>
            Type for accessing an object that is not available during dependency injection container creation
            </summary>
            <typeparam name="TValue">Type that will be accessible after dependency injection creation</typeparam>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Accessors.Accessor`1.#ctor(`0)">
            <summary>
            Creates accessor for dependency injection, for values that not available during container creation
            </summary>
            <param name="value">Value if it's immediately available from dependency injection</param>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Accessors.Accessor`1.Microsoft#Omex#Extensions#Abstractions#Accessors#IAccessorSetter{TValue}#SetValue(`0)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Accessors.Accessor`1.Microsoft#Omex#Extensions#Abstractions#IAccessor{TValue}#OnFirstSet(System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.Accessors.Accessor`1.Microsoft#Omex#Extensions#Abstractions#IAccessor{TValue}#Value">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Accessors.Accessor`1.Microsoft#Omex#Extensions#Abstractions#IAccessor{TValue}#GetValueOrThrow">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Omex.Extensions.Abstractions.Accessors.IAccessorSetter`1">
            <summary>
            Interface to provide value for accessor
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Accessors.IAccessorSetter`1.SetValue(`0)">
            <summary>
            Set value when it's available
            </summary>
            <remarks>
            Beside saving value it will also execute saved activities that were waiting for a value
            </remarks>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityExtensions">
            <summary>
            Extensions for Activity
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityExtensions.GetRootIdAsGuid(System.Diagnostics.Activity)">
            <summary>
            Transforms RootId into Guid that might be used in places where old Correlation Id needed
            </summary>
            <remarks>RootId could be converted only for started Activity when W3C id format used, all other cases will return null</remarks>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityExtensions.GetUserHash(System.Diagnostics.Activity)">
            <summary>
            Get user hash from activity
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityExtensions.IsHealthCheck(System.Diagnostics.Activity)">
            <summary>
            Returns true if activity is transaction
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityExtensions.IsPerformanceTest(System.Diagnostics.Activity)">
            <summary>
            Returns true if activity is marked as Performance test
            </summary>
            <param name="activity">Activity for this request</param>
            <returns>True if the activity is marked as a Performance test, false otherwise</returns>
            <remarks>Currently added to the BaggageItems (via Kestrel) using header value Correlation-Context: "PerformanceTestMarker=true"</remarks>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityExtensions.SetUserHash(System.Diagnostics.Activity,System.String)">
            <summary>
            Set user hash for the activity
            </summary>
            <remarks>This property would be transfered to child activity and via web requests</remarks>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityExtensions.MarkAsHealthCheck(System.Diagnostics.Activity)">
            <summary>
            Mark as health check activity
            </summary>
            <remarks>This property would be transfered to child activity and via web requests</remarks>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityExtensions.SetResult(System.Diagnostics.Activity,Microsoft.Omex.Extensions.Abstractions.Activities.ActivityResult)">
            <summary>
            Set result
            </summary>
            <remarks>This property won't be transferred to child activity or via web requests</remarks>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityExtensions.MarkAsSuccess(System.Diagnostics.Activity)">
            <summary>
            Set activity result to Success
            </summary>
            <remarks>This property won't be transferred to child activity or via web requests</remarks>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityExtensions.MarkAsSystemError(System.Diagnostics.Activity)">
            <summary>
            Set activity result to SystemError
            </summary>
            <remarks>This property won't be transferred to child activity or via web requests</remarks>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityExtensions.MarkAsExpectedError(System.Diagnostics.Activity)">
            <summary>
            Set activity result to ExpectedError
            </summary>
            <remarks>This property won't be transferred to child activity or via web requests</remarks>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityExtensions.SetSubType(System.Diagnostics.Activity,System.String)">
            <summary>
            Set sub type
            </summary>
            <remarks>This property won't be transfered to child activity or via web requests</remarks>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityExtensions.SetMetadata(System.Diagnostics.Activity,System.String)">
            <summary>
            Set metadata
            </summary>
            <remarks>This property won't be transfered to child activity or via web requests</remarks>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityExtensions.GetObsoleteCorrelationId(System.Diagnostics.Activity)">
            <summary>
            Get correlation guid that is used by old Omex services
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityExtensions.SetObsoleteCorrelationId(System.Diagnostics.Activity,System.Guid)">
            <summary>
            Set correlation guid that is used by old Omex services
            </summary>
            <remarks>This property would be transfered to child activity and via web requests</remarks>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityExtensions.GetObsoleteTransactionId(System.Diagnostics.Activity)">
            <summary>
            Get transaction id that is used by old Omex services
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityExtensions.SetObsoleteTransactionId(System.Diagnostics.Activity,System.UInt32)">
            <summary>
            Set transaction id that is used by old Omex services
            </summary>
            <remarks>This property would be transfered to child activity and via web requests</remarks>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityResult">
            <summary>
            Defines the possible activity results
            </summary>
            <remarks>
            This enum is essential to OMEX monitoring solutions and generally should not change.
            If values are added or removed, ActivityResultStrings should be updated as well.
            </remarks>
        </member>
        <member name="F:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityResult.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityResult.SystemError">
            <summary>
            System Error
            </summary>
        </member>
        <member name="F:Microsoft.Omex.Extensions.Abstractions.Activities.ActivityResult.ExpectedError">
            <summary>
            Expected Error (consolidating old UserError and PayloadError)
            </summary>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Abstractions.Activities.Processing.ActivityResultStrings">
            <summary>
            Class with activity result enum string values to avoid allocations
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.Activities.Processing.ActivityResultStrings.SystemError">
            <summary>
            Activity SystemError result string
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.Activities.Processing.ActivityResultStrings.ExpectedError">
            <summary>
            Activity ExpectedError result string
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.Activities.Processing.ActivityResultStrings.Success">
            <summary>
            Activity Success result string
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.Activities.Processing.ActivityResultStrings.Unknown">
            <summary>
            Activity Unknown result string
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Activities.Processing.ActivityResultStrings.ResultToString(Microsoft.Omex.Extensions.Abstractions.Activities.ActivityResult)">
            <summary>
            Returns corresponding to enum string value with creating new string
            </summary>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Abstractions.Activities.Processing.ActivityTagKeys">
            <summary>
            Activity does not have methods to extract tags efficiently, so we need to expose keys to provide ability of extracting tags
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.Activities.Processing.ActivityTagKeys.Result">
            <summary>
            Activity result tag key
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.Activities.Processing.ActivityTagKeys.SubType">
            <summary>
            Activity sub type tag key
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.Activities.Processing.ActivityTagKeys.Metadata">
            <summary>
            Activity metadata tag key
            </summary>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Abstractions.Activities.Processing.IActivityStartObserver">
            <summary>
            Interface to monitor activity start
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Activities.Processing.IActivityStartObserver.OnStart(System.Diagnostics.Activity,System.Object)">
            <summary>
            Method will be called after activity start
            </summary>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Abstractions.Activities.Processing.IActivityStopObserver">
            <summary>
            Interface to monitor activity stop
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Activities.Processing.IActivityStopObserver.OnStop(System.Diagnostics.Activity,System.Object)">
            <summary>
            Method will be called after activity stop
            </summary>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Abstractions.EventSources.EventSourcesEventIds">
            <summary>
            Event ids enum
            </summary>
            <remarks>
            enum numbers preserve historical order, changing them will require to change our log aggregation system
            </remarks>
        </member>
        <member name="F:Microsoft.Omex.Extensions.Abstractions.EventSources.EventSourcesEventIds.LogInfo">
            <summary>
            Event Id for logging general info message
            </summary>
        </member>
        <member name="F:Microsoft.Omex.Extensions.Abstractions.EventSources.EventSourcesEventIds.LogError">
            <summary>
            Event Id for logging error message
            </summary>
        </member>
        <member name="F:Microsoft.Omex.Extensions.Abstractions.EventSources.EventSourcesEventIds.LogWarning">
            <summary>
            Event Id for logging warning message
            </summary>
        </member>
        <member name="F:Microsoft.Omex.Extensions.Abstractions.EventSources.EventSourcesEventIds.LogVerbose">
            <summary>
            Event Id for logging verbose message
            </summary>
        </member>
        <member name="F:Microsoft.Omex.Extensions.Abstractions.EventSources.EventSourcesEventIds.LogSpam">
            <summary>
            Event Id for logging spam message
            </summary>
        </member>
        <member name="F:Microsoft.Omex.Extensions.Abstractions.EventSources.EventSourcesEventIds.LogActivity">
            <summary>
            Event Id for logging activities
            </summary>
        </member>
        <member name="F:Microsoft.Omex.Extensions.Abstractions.EventSources.EventSourcesEventIds.LogActivityTestContext">
            <summary>
            Event Id for logging test activities
            </summary>
        </member>
        <member name="F:Microsoft.Omex.Extensions.Abstractions.EventSources.EventSourcesEventIds.ServiceTypeRegistered">
            <summary>
            Event Id for service type registered
            </summary>
        </member>
        <member name="F:Microsoft.Omex.Extensions.Abstractions.EventSources.EventSourcesEventIds.ServiceHostInitializationFailed">
            <summary>
            Event Id for service host initialization failed
            </summary>
        </member>
        <member name="F:Microsoft.Omex.Extensions.Abstractions.EventSources.EventSourcesEventIds.ActorTypeRegistered">
            <summary>
            Event Id for actor type registered
            </summary>
        </member>
        <member name="F:Microsoft.Omex.Extensions.Abstractions.EventSources.EventSourcesEventIds.ActorHostInitializationFailed">
            <summary>
            Event Id for actor host initialization failed
            </summary>
        </member>
        <member name="F:Microsoft.Omex.Extensions.Abstractions.EventSources.EventSourcesEventIds.LogAnalytics">
            <summary>
            Event Id for logging Analytics information
            </summary>
        </member>
        <member name="F:Microsoft.Omex.Extensions.Abstractions.EventSources.EventSourcesEventIds.GenericHostBuildSucceeded">
            <summary>
            Event Id for generic host build succeded
            </summary>
        </member>
        <member name="F:Microsoft.Omex.Extensions.Abstractions.EventSources.EventSourcesEventIds.GenericHostFailed">
            <summary>
            Event Id for generic host build failed
            </summary>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.BaseExecutionContext">
            <summary>
            Base class for machine information
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.BaseExecutionContext.#ctor(Microsoft.Extensions.Hosting.IHostEnvironment)">
            <summary>
            Create instance of execution context
            Inherit from this class to populate defined properties with proper values
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.BaseExecutionContext.MachineId">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.BaseExecutionContext.MachineName">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.BaseExecutionContext.ApplicationName">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.BaseExecutionContext.NodeName">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.BaseExecutionContext.ClusterIpAddress">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.BaseExecutionContext.Cluster">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.BaseExecutionContext.EnvironmentName">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.BaseExecutionContext.DeploymentSlice">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.BaseExecutionContext.RegionName">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.BaseExecutionContext.ServiceName">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.BaseExecutionContext.BuildVersion">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.BaseExecutionContext.IsCanary">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.BaseExecutionContext.IsPrivateDeployment">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.BaseExecutionContext.GetVariable(System.String)">
            <summary>
            Get environment variable value
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.BaseExecutionContext.GetMachineName">
            <summary>
            Get Machine Name from environment variable
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.BaseExecutionContext.GetIpAddress(System.String)">
            <summary>
            Get ip address
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.BaseExecutionContext.GetBuildVersion">
            <summary>
            Get build version
            </summary>
        </member>
        <member name="F:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.BaseExecutionContext.DefaultEmptyValue">
            <summary>
            Default empty value
            </summary>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.IExecutionContext">
            <summary>
            Interface with information about the environment that executes code
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.IExecutionContext.BuildVersion">
            <summary>
            Build version string
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.IExecutionContext.DeploymentSlice">
            <summary>
            The deployment slice
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.IExecutionContext.EnvironmentName">
            <summary>
            The environment name
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.IExecutionContext.IsCanary">
            <summary>
            Is Canary environment
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.IExecutionContext.IsPrivateDeployment">
            <summary>
            Is the deployment a private deployment
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.IExecutionContext.Cluster">
            <summary>
            The name of the deployment cluster to which this machine belongs
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.IExecutionContext.ClusterIpAddress">
            <summary>
            The ip address of the deployment cluster to which this machine belongs
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.IExecutionContext.MachineId">
            <summary>
            The reporting identifier for the current machine
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.IExecutionContext.ApplicationName">
            <summary>
            Name of the application
            </summary>
            <remarks>
            Could be the same as service name, but would be different if you running ex. Service Fabric application with multiple services
            </remarks>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.IExecutionContext.NodeName">
            <summary>
            Node name
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.IExecutionContext.RegionName">
            <summary>
            Azure region name
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.ExecutionContext.IExecutionContext.ServiceName">
            <summary>
            The service name
            </summary>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Abstractions.IAccessor`1">
            <summary>
            Provides access to an object that is not available during dependency injection container build,
            because it was not available during container creation
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Abstractions.IAccessor`1.Value">
            <summary>
            Get value if it's available
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.IAccessor`1.GetValueOrThrow">
            <summary>
            Returns value from accessor or throws <see cref="T:System.InvalidOperationException" /> if it's null
            </summary>
            <exception cref="T:System.InvalidOperationException">If value is null</exception>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.IAccessor`1.OnFirstSet(System.Action{`0})">
            <summary>
            Execute function when value is available (set in the first time)
            </summary>
            <remarks>
            If value is not null, action will be executed immediately,
            otherwise activity will be stored until it's available and then executed,
            list of actions would be cleared after execution
            </remarks>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Abstractions.SfConfigurationException">
            <summary>
            Exception of getting Service Fabric configuration parameters from environment variables
            </summary>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Abstractions.SfConfigurationProvider">
            <summary>
            Configuration provider for service fabric environment variables
            </summary>
        </member>
        <member name="F:Microsoft.Omex.Extensions.Abstractions.SfConfigurationProvider.PublishAddressEvnVariableName">
            SF environment variables taken from https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-environment-variables-reference
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.SfConfigurationProvider.GetSfVariable(System.String)">
            <summary>
            Get Service Fabric Variable from environment
            </summary>
            <param name="name">Variable name</param>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.SfConfigurationProvider.GetPublishAddress">
            <summary>
            The IP or FQDN of the node, as specified in the cluster manifest file
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.SfConfigurationProvider.GetEndpointPort(System.String)">
            <summary>
            Port number for the endpoint
            </summary>
            <param name="endpointName">Service endpoint name</param>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Abstractions.Tag">
            <summary>
            Tagging utility class
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Tag.ReserveTag(System.Int32)">
            <summary>
            Create an EventId using a tag using GitTagger
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Tag.Create(System.String,System.Int32)">
            <summary>
            Create an EventId tag using CallerFilePath and CallerLineNumber
            </summary>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Abstractions.Validation">
            <summary>
            Class provides common validation methods
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Abstractions.Validation.ThrowIfNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throw exception if string is null or empty or white space, otherwise returns not-nullable value
            </summary>
            <param name="value">value to check</param>
            <param name="name">name of the value for exception message</param>
            <exception cref="T:System.ArgumentNullException">if value is null</exception>
            <exception cref="T:System.ArgumentException">if value is empty or white space</exception>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Stub to allow using record and init properties when building for older targets
            </summary>
        </member>
    </members>
</doc>
