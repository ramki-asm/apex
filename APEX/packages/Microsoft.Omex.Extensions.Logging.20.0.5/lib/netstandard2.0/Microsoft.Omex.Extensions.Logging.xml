<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Omex.Extensions.Logging</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Omex.Extensions.Logging.ILogEventSender">
            <summary>
            Event source to send log messages
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Logging.ILogEventSender.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Is logging enabled for specified log level
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Logging.ILogEventSender.LogMessage(System.Diagnostics.Activity,System.String,Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.Int32,System.String,System.Exception)">
            <summary>
            Log message
            </summary>
            <param name="activity">Activity for this log event</param>
            <param name="category">Log category</param>
            <param name="level">Log level</param>
            <param name="eventId">event Id</param>
            <param name="threadId">Id of the thread</param>
            <param name="message">Log message</param>
            <param name="exception">The exception, if any, associated with the log.</param>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Logging.InitializationLogger">
            <summary>
            InitializationLogger is the logger to be used before the proper ILogger from DI is set.
            Not to be used as main logger.
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Logging.InitializationLogger.Instance">
            <summary>
            Instance of logger
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Logging.InitializationLogger.LogInitializationSucceed(System.String,System.String)">
            <summary>
            Log on successful building
            </summary>
            <param name="serviceNameForLogging">Service name for logging</param>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Logging.InitializationLogger.LogInitializationFail(System.String,System.Exception,System.String)">
            <summary>
            Log on build failure
            </summary>
            <param name="serviceNameForLogging">Service name for logging</param>
            <param name="ex">Exception to log</param>
            <param name="message">Message to log</param>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Logging.EmptyServiceContext">
            <summary>
            IServiceContext without any information
            </summary>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Logging.ServiceInitializationEventSource">
            <summary>
            Service Fabric event source
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Logging.ServiceInitializationEventSource.Instance">
            <summary>
            Instance of service fabric event source
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Logging.ServiceInitializationEventSource.LogHostBuildSucceeded(System.Int32,System.String,System.String)">
            <summary>
            Logs a generic host build success
            </summary>
            <param name="hostProcessId">Host process id</param>
            <param name="serviceType">Service type</param>
            <param name="message">Optional message</param>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Logging.ServiceInitializationEventSource.LogHostFailed(System.String,System.String,System.String)">
            <summary>
            Logs a generic host failure
            </summary>
            <param name="exception">Exception</param>
            <param name="serviceType">Service type</param>
            <param name="message">Optional message</param>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Logging.ServiceInitializationEventSource.LogHostBuildSucceededInternal(System.Int32,System.String,System.String)">
            <summary>
            Log host build succeeded
            </summary>
            <param name="hostProcessId">Host process id</param>
            <param name="serviceType">The service type</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Logging.ServiceInitializationEventSource.LogHostFailedInternal(System.String,System.String,System.String)">
            <summary>
            Log host build failed
            </summary>
            <param name="exception">Exception to be logged</param>
            <param name="serviceType">The service type</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Logging.Replayable.ILogEventReplayer">
            <summary>
            Replays activity logs
            </summary>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Logging.OmexLogEventReplayer">
            <summary>
            Replays Trace and Debug logs with Info level if Activity marked as failed
            </summary>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Logging.IServiceContext">
            <summary>
            Interface with service context information
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Logging.IServiceContext.PartitionId">
            <summary>
            Partition Id
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Logging.IServiceContext.ReplicaOrInstanceId">
            <summary>
            Replica Id or Instance Id
            </summary>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Logging.OmexLoggingOptions">
            <summary>
            Options for Omex logger
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Logging.OmexLoggingOptions.ReplayLogsInCaseOfError">
            <summary>
            Should logs wrapped by the Activity be stored and replayed at a higher severity, in the event of an error.
            Setting this to true will impact the performance of logging
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Logging.OmexLoggingOptions.AddObsoleteCorrelationToActivity">
            <summary>
            Enabling this option will add CorrelationId guid to activity that will increase its size
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Logging.OmexLoggingOptions.MaxReplayedEventsPerActivity">
            <summary>
            Maximum number of events that activity can store for replay
            </summary>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Logging.ServiceCollectionExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> class
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Logging.ServiceCollectionExtensions.AddOmexServiceContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add IServiceContext to ServiceCollection
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Logging.ServiceCollectionExtensions.AddOmexLogging(Microsoft.Extensions.Logging.ILoggingBuilder)">
            <summary>
            Adds Omex event logger to the factory
            </summary>
            <param name="builder">The extension method argument</param>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Logging.ServiceCollectionExtensions.AddOmexLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds Omex event logger to the factory
            </summary>
            <param name="serviceCollection">The extension method argument</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> so that additional calls can be chained</returns>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Logging.TagsExtensions">
            <summary>
            Extensions for dealing with legacy Tag IDs.
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Logging.TagsExtensions.ToTagId(Microsoft.Extensions.Logging.EventId)">
            <summary>
            Get the Tag id as a string, from an <see cref="T:Microsoft.Extensions.Logging.EventId"/>.
            Please avoid using this method if posible, it's added to support old tag scenario and made internal for unit tests
            </summary>
            <param name="eventId">The event ID.</param>
            <returns>the tag as string</returns>
            <remarks>
            In terms of the conversion from integer tag value to equivalent string reprsentation, the following scheme is used:
            1. If the integer tag &lt;= 0x0000FFFF, treat the tag as special tag called numeric only tag.
            Hence the string representation is direct conversion i.e. tag id 6700 == 6700
            2. Else, if it's an alphanumeric tag, there are 2 different schemes to pack those. viz. 4 letter and 5 letter representations.
            2.1 four letter tags are converted by transforming each byte into it's equivalent ASCII. e.g. 0x61626364 => abcd
            2.2 five letter tags are converted by transforming lower 30 bits of the integer value into the symbol space a-z,0-9.
            The conversion is done by treating each group of 6 bits as an index into the symbol space a,b,c,d, ... z, 0, 1, 2, ....9
            eg. 0x000101D0 = 00 000000 000000 010000 000111 010000 2 = aaqhq
            </remarks>
        </member>
    </members>
</doc>
