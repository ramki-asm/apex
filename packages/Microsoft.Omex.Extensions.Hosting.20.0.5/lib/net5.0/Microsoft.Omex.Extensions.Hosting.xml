<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Omex.Extensions.Hosting</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Omex.Extensions.Hosting.Certificates.CertificateStore.GetAllCertificates(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Hosting.Certificates.ICertificateReader">
            <summary>
            Certificate reader interface
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Hosting.Certificates.ICertificateReader.GetCertificatesByCommonName(System.String,System.Boolean,System.Security.Cryptography.X509Certificates.StoreName)">
            <summary>
            Returns all certificates which match commonName parameter
            </summary>
            <param name="commonName">Common name of certificates</param>
            <param name="refreshCache">Refresh cache before looking for certificate</param>
            <param name="storeName">Certificate store</param>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Hosting.Certificates.ICertificateReader.GetCertificateByCommonName(System.String,System.Boolean,System.Security.Cryptography.X509Certificates.StoreName)">
            <summary>
            Returns certificate which match commonName parameter
            If there is more than one certificate with given thumbprint return the most suitable certificate
            A certificate is considered active if notBefore &lt;= now &gt;= notAfter
            A certificate is considered better than another certificate if
            1.) Is active and the other one is inactive
            2.) Both are active but the other one expires sooner
            3.) Both are expired, but the other one expired earlier
            </summary>
            <param name="commonName">Common name of certificates</param>
            <param name="refreshCache">Refresh cache before looking for certificate</param>
            <param name="storeName">Certificate store</param>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Hosting.Certificates.ICertificateReader.GetCertificateByThumbprint(System.String,System.Boolean,System.Security.Cryptography.X509Certificates.StoreName)">
            <summary>
            Get certificate by thumbprint
            </summary>
            <param name="thumbprint">Thumbprint of certificate</param>
            <param name="refreshCache">Refresh cache before looking for certificate</param>
            <param name="storeName">Certificate store</param>
            <remarks>It preferable to getting certificate by common name.
            Please use this method only in cases where retrieving by common name might not work, e.g. a certificate used to decrypt an access token.
            </remarks>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Hosting.Certificates.ICertificateStore.GetAllCertificates(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Reads all X509Certificate2s from store with name storeName on local machine
            </summary>
            <param name="storeName">Name of the store to read from</param>
            <param name="storeLocation">Location of store</param>
            <returns>X509 certificates from the store</returns>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Hosting.Certificates.InitializationCertificateReader">
            <summary>
            CertificateReader to use until DI container build.
            </summary>
            <remarks>
            Please prefer using instance resolved from DI container.
            </remarks>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Hosting.Certificates.InitializationCertificateReader.Instance">
            <summary>
            Instance of CertificateReader
            </summary>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Hosting.OmexEnvironments">
            <summary>
            Provides variables with commonly used environments
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Hosting.OmexEnvironments.Development">
            <summary>
            Development environment, previously called Pr
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Hosting.OmexEnvironments.Int">
            <summary>
            Integration environment
            This is our CI/CD environment, deployments are triggered on completion of a master build
            Consequently, we deploy to INT on completion of a PR
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Hosting.OmexEnvironments.EDog">
            <summary>
            Pre production environment
            This environment is used to test builds that will eventually make their way to Production
            </summary>
        </member>
        <member name="P:Microsoft.Omex.Extensions.Hosting.OmexEnvironments.Production">
            <summary>
            Production/live environment
            </summary>
        </member>
        <member name="T:Microsoft.Omex.Extensions.Hosting.ServiceCollectionExtensions">
            <summary>
            Extension to add Omex dependencies to HostBuilder
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Hosting.ServiceCollectionExtensions.AddOmexServices(Microsoft.Extensions.Hosting.IHostBuilder)">
            <summary>
            Add Omex Logging and ActivitySource dependencies
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Hosting.ServiceCollectionExtensions.AddOmexServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add Omex Logging and ActivitySource dependencies
            </summary>
        </member>
        <member name="M:Microsoft.Omex.Extensions.Hosting.ServiceCollectionExtensions.AddCertificateReader(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add Omex Logging and ActivitySource dependencies
            </summary>
        </member>
    </members>
</doc>
